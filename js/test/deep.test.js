// Generated by CoffeeScript 1.6.2
(function() {
  var assert, deep, testHelper, _;

  _ = require('underscore');

  assert = require('assert');

  testHelper = require('./test_helper');

  deep = require('../lib/deep');

  describe('deep module', function() {
    describe('isPlainObject()', function() {
      it('object literals are plain objects', function(done) {
        assert(deep.isPlainObject({}));
        return done();
      });
      it('objects created with `new Object` are plain objects', function(done) {
        assert(deep.isPlainObject(new Object));
        return done();
      });
      it('global is a plain object', function(done) {
        assert(deep.isPlainObject(global));
        return done();
      });
      it('arrays are not plain objects', function(done) {
        assert(!deep.isPlainObject([]));
        return done();
      });
      it('functions are not plain objects', function(done) {
        assert(!deep.isPlainObject(function() {}));
        return done();
      });
      it('Buffers are not plain objects', function(done) {
        assert(!deep.isPlainObject(new Buffer(1)));
        return done();
      });
      return it('Custom objects are not plain objects', function(done) {
        var Foobar;

        Foobar = function() {};
        assert(!deep.isPlainObject(new Foobar));
        return done();
      });
    });
    describe('clone()', function() {
      beforeEach(function(done) {
        var Foobar;

        Foobar = (function() {
          function Foobar() {}

          return Foobar;

        })();
        this.original = {
          arr: [
            function(arg) {
              return "Hello " + arg + "!";
            }, 'hello!', 1, new Buffer(1), {
              foo: 'bar',
              foobar: new Foobar
            }
          ],
          obj: {
            a: [
              {
                b: {
                  c: []
                }
              }
            ],
            z: 'just a string!'
          }
        };
        this.clone = deep.clone(this.original);
        return done();
      });
      it('should generate new plain objects and arrays', function(done) {
        this.clone.obj.a[0].b.c.push(0);
        assert.notEqual(this.clone.obj.a[0].b.c.length, this.original.obj.a[0].b.c.length);
        this.clone.arr[4].bar = 'foo';
        assert(this.original.arr[4].bar == null);
        return done();
      });
      it('should preserve references to functions', function(done) {
        assert.equal(this.clone.arr[0], this.original.arr[0]);
        return done();
      });
      it('should preserve references to Buffers', function(done) {
        assert.equal(this.clone.arr[3].constructor.name, 'Buffer');
        assert.equal(this.clone.arr[3], this.original.arr[3]);
        return done();
      });
      return it('should preserve references to custom objects', function(done) {
        assert.equal(this.clone.arr[4].foobar.constructor.name, 'Foobar');
        assert.equal(this.clone.arr[4].foobar, this.original.arr[4].foobar);
        return done();
      });
    });
    describe('extend()', function() {
      it('should accept multiple sources', function(done) {
        var a, b, c;

        a = {
          a: 1
        };
        b = {
          b: 2
        };
        c = {
          c: 3
        };
        deep.extend(a, b, c);
        assert.deepEqual(a, {
          a: 1,
          b: 2,
          c: 3
        });
        return done();
      });
      it('should prioritize latter arguments', function(done) {
        var a, b, c;

        a = {
          a: 1
        };
        b = {
          a: 2
        };
        c = {
          a: 3
        };
        deep.extend(a, b, c);
        assert.deepEqual(a, {
          a: 3
        });
        return done();
      });
      it('should extend recursively', function(done) {
        var a, b;

        a = {
          alpha: {
            beta: {
              charlie: 1
            }
          }
        };
        b = {
          alpha: {
            beta: {
              delta: 3
            }
          },
          epsilon: 2
        };
        deep.extend(a, b);
        assert.deepEqual(a, {
          alpha: {
            beta: {
              charlie: 1,
              delta: 3
            }
          },
          epsilon: 2
        });
        return done();
      });
      return it('should create copies of nested objects', function(done) {
        var a, b;

        a = {
          alpha: {
            beta: {
              charlie: 1
            }
          }
        };
        b = {
          alpha: {
            beta: {
              delta: [1, 2, 3, 4]
            }
          }
        };
        deep.extend(a, b);
        b.alpha.beta.delta.push(5);
        assert.equal(a.alpha.beta.delta.length, b.alpha.beta.delta.length - 1);
        return done();
      });
    });
    describe('select()', function() {
      before(function(done) {
        this.container = {
          arr: [
            function(arg) {
              return "Hello " + arg + "!";
            }, 'hello!', 1, function(arg) {
              return "Goodbye " + arg + "!";
            }, {
              foo: 'bar',
              foobar: function(arg) {
                return "Hello again " + arg + "!";
              }
            }
          ],
          obj: {
            a: [
              {
                b: {
                  c: function(arg) {
                    return "Goodbye again " + arg + "!";
                  }
                }
              }
            ],
            z: 'just a string!'
          }
        };
        this.selected = deep.select(this.container, _.isFunction);
        return done();
      });
      it("should find all objects that satisfy the filter", function(done) {
        assert.equal(this.selected.length, 4);
        assert.deepEqual(this.selected[0].value, this.container.arr[0]);
        assert.deepEqual(this.selected[1].value, this.container.arr[3]);
        assert.deepEqual(this.selected[2].value, this.container.arr[4].foobar);
        assert.deepEqual(this.selected[3].value, this.container.obj.a[0].b.c);
        return done();
      });
      return it("should report paths to objects that satisfy the filter", function(done) {
        assert.deepEqual(this.selected[0].path, ['arr', '0']);
        assert.deepEqual(this.selected[1].path, ['arr', '3']);
        assert.deepEqual(this.selected[2].path, ['arr', '4', 'foobar']);
        assert.deepEqual(this.selected[3].path, ['obj', 'a', '0', 'b', 'c']);
        return done();
      });
    });
    describe("set()", function() {
      beforeEach(function(done) {
        this.obj = {
          arr: []
        };
        return done();
      });
      it('should set values using paths', function(done) {
        deep.set(this.obj, ['arr', '0'], 'new value');
        assert.equal(this.obj.arr[0], 'new value');
        return done();
      });
      return it('should set values with path lenghts of 1', function(done) {
        deep.set(this.obj, ['new'], 'new value');
        assert.equal(this.obj["new"], 'new value');
        return done();
      });
    });
    return describe("transform()", function() {
      beforeEach(function(done) {
        this.original = {
          arr: [
            function(arg) {
              return "Hello " + arg + "!";
            }, 'hello!', 1, function(arg) {
              return "Goodbye " + arg + "!";
            }, {
              foo: 'bar',
              foobar: function(arg) {
                return "Hello again " + arg + "!";
              },
              bar: 3
            }
          ],
          obj: {
            a: [
              {
                b: {
                  c: function(arg) {
                    return "Goodbye again " + arg + "!";
                  }
                }
              }, 5
            ],
            z: 'just a string!'
          }
        };
        this.transformed = deep.transform(this.original, _.isNumber, function(v) {
          return v + 1;
        });
        return done();
      });
      it('should apply transform to values that satisfy the filter', function(done) {
        assert.equal(this.transformed.arr[2], 2);
        assert.equal(this.transformed.arr[4].bar, 4);
        assert.equal(this.transformed.obj.a[1], 6);
        return done();
      });
      return it('should not affect values that do not satisfy the filter', function(done) {
        assert.equal(this.transformed.arr[0], this.original.arr[0]);
        assert.equal(this.transformed.arr[1], this.original.arr[1]);
        assert.equal(this.transformed.obj.z, this.original.obj.z);
        return done();
      });
    });
  });

}).call(this);
